var documenterSearchIndex = {"docs":
[{"location":"#StrongFieldDynamics","page":"Home","title":"StrongFieldDynamics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for StrongFieldDynamics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package for studying intense-laser atom interactions. Julia is fast.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#StrongFieldDynamics.ContinuumSolution","page":"Home","title":"StrongFieldDynamics.ContinuumSolution","text":"ContinuumSolution\n\nBessel      -> ... Coulomb     -> ... Distorted   -> ...\n\n\n\n\n\n","category":"type"},{"location":"#StrongFieldDynamics.ClebschGordan-NTuple{6, Any}","page":"Home","title":"StrongFieldDynamics.ClebschGordan","text":"ClebschGordan(ja, ma, jb, mb, Jab, Mab)\n\nComputes the Clebsch-Gordan coefficients\n\n\n\n\n\n","category":"method"},{"location":"#StrongFieldDynamics.F1_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Any}","page":"Home","title":"StrongFieldDynamics.F1_integral","text":"The pulse shape integral\n\n\n\n\n\n","category":"method"},{"location":"#StrongFieldDynamics.F2_integral-Tuple{Pulse, AtomicElectron}","page":"Home","title":"StrongFieldDynamics.F2_integral","text":"The pulse shape integral\n\n\n\n\n\n","category":"method"},{"location":"#StrongFieldDynamics.T0-Tuple{Pulse, AtomicElectron, ContinuumElectron, Rational{Int64}, Rational{Int64}, Float64, Float64}","page":"Home","title":"StrongFieldDynamics.T0","text":"T0(p, mj, msp)\n\nComputes the direct scattering amplitude \n\n\n\n\n\n","category":"method"},{"location":"#StrongFieldDynamics.Ylm-NTuple{4, Any}","page":"Home","title":"StrongFieldDynamics.Ylm","text":"Ylm(l, m, θ, ϕ)\n\nComputes the Spherical hamonics using the Associated Legender Polynomials as      Ylm(l, m, θ, ϕ) = Plm(l, m, cos(θ)) * exp(immϕ)\n\n\n\n\n\n","category":"method"},{"location":"#StrongFieldDynamics.atomic_electron-Tuple{Int64, Int64}","page":"Home","title":"StrongFieldDynamics.atomic_electron","text":"atomic_electron(n::Int64, l::Int64)\n\nComputes the atomic electron wavefunction for the corresponding n & l Principal and Orbital quantum numbers, repectively. \n\n\n\n\n\n","category":"method"},{"location":"#StrongFieldDynamics.bessel_electron-Tuple{Float64, Int64, Vector{Float64}}","page":"Home","title":"StrongFieldDynamics.bessel_electron","text":"bessel_electron(ε::Flost64, l::Int64, r::Vector{Float64})\n\nComputes the radial part of the continuum (free) electron with Bessel function                          P (r) = r jₗ(pr) Returns the radial wavefunction of type Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"#StrongFieldDynamics.distorted_electron-Tuple{Float64, Int64, Vector{Float64}, Vector{Float64}}","page":"Home","title":"StrongFieldDynamics.distorted_electron","text":"distorted_electron(ε::Float64, l::Int64, r::Vector{Float64}, pot::Vector{Float64})\n\nComputes the distorted wave function of continuum photo electron with Bessel function Returns the radial wavefunction and phase-shift of type (Vector{Float64}, Float64)\n\n\n\n\n\n","category":"method"},{"location":"#StrongFieldDynamics.inner_product-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}","page":"Home","title":"StrongFieldDynamics.inner_product","text":"inner_product(p_partialwave::PartialWave, a_electron::AtomicElectron, r::Vector{Float64})\n\nCalculates the inner product of continuum and bound (atomic) electron radial wavefunction\n\n\n\n\n\n","category":"method"},{"location":"#StrongFieldDynamics.reduced_matrix_element-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}","page":"Home","title":"StrongFieldDynamics.reduced_matrix_element","text":"reduced_matrix_element(εp, lp, jp, n, l, j)\n\nComputes the reduced matrix element <εp lp jp || p || n l j>\n\n\n\n\n\n","category":"method"},{"location":"#StrongFieldDynamics.sin2Sv-Tuple{Float64, Float64, Pulse, AtomicElectron, ContinuumElectron}","page":"Home","title":"StrongFieldDynamics.sin2Sv","text":"sin2Sv(t::Float64, θ::Float64, pulse::Pulse, a_electron::AtomicElectron, p_electron::ContinuumElectron)\n\nDefines a sin² envelope.\n\n\n\n\n\n","category":"method"}]
}
