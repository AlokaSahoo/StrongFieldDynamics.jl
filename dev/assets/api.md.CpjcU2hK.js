import{_ as o,C as p,c as r,o as h,aA as l,j as s,G as a,a as e,w as n}from"./chunks/framework.QfZinlYu.js";const K=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),d={name:"api.md"},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""};function O(W,i,z,H,G,Y){const t=p("Badge");return h(),r("div",null,[i[116]||(i[116]=l('<ul><li><a href="#StrongFieldDynamics.AngularDistribution"><code>StrongFieldDynamics.AngularDistribution</code></a></li><li><a href="#StrongFieldDynamics.AtomicElectron"><code>StrongFieldDynamics.AtomicElectron</code></a></li><li><a href="#StrongFieldDynamics.ContinuumElectron"><code>StrongFieldDynamics.ContinuumElectron</code></a></li><li><a href="#StrongFieldDynamics.ContinuumSolution"><code>StrongFieldDynamics.ContinuumSolution</code></a></li><li><a href="#StrongFieldDynamics.EnergyDistribution"><code>StrongFieldDynamics.EnergyDistribution</code></a></li><li><a href="#StrongFieldDynamics.MomentumDistribution"><code>StrongFieldDynamics.MomentumDistribution</code></a></li><li><a href="#StrongFieldDynamics.PartialWave"><code>StrongFieldDynamics.PartialWave</code></a></li><li><a href="#StrongFieldDynamics.Pulse"><code>StrongFieldDynamics.Pulse</code></a></li><li><a href="#StrongFieldDynamics.ClebschGordan-NTuple{6, Any}"><code>StrongFieldDynamics.ClebschGordan</code></a></li><li><a href="#StrongFieldDynamics.F1_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}"><code>StrongFieldDynamics.F1_integral</code></a></li><li><a href="#StrongFieldDynamics.F1_integral_quad-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}"><code>StrongFieldDynamics.F1_integral_quad</code></a></li><li><a href="#StrongFieldDynamics.F2_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}"><code>StrongFieldDynamics.F2_integral</code></a></li><li><a href="#StrongFieldDynamics.F2_integral_quad-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}"><code>StrongFieldDynamics.F2_integral_quad</code></a></li><li><a href="#StrongFieldDynamics.T0-Tuple{Pulse, AtomicElectron, ContinuumElectron, Rational{Int64}, Rational{Int64}, Float64, Float64}"><code>StrongFieldDynamics.T0</code></a></li><li><a href="#StrongFieldDynamics.Ylm-NTuple{4, Any}"><code>StrongFieldDynamics.Ylm</code></a></li><li><a href="#StrongFieldDynamics.bessel_electron-Tuple{Float64, Int64, Vector{Float64}}"><code>StrongFieldDynamics.bessel_electron</code></a></li><li><a href="#StrongFieldDynamics.compute_angular_distribution-Tuple{AtomicElectron, Pulse}"><code>StrongFieldDynamics.compute_angular_distribution</code></a></li><li><a href="#StrongFieldDynamics.compute_atomic_electron-Tuple{Int64, Int64, Int64}"><code>StrongFieldDynamics.compute_atomic_electron</code></a></li><li><a href="#StrongFieldDynamics.compute_energy_distribution-Tuple{AtomicElectron, Pulse}"><code>StrongFieldDynamics.compute_energy_distribution</code></a></li><li><a href="#StrongFieldDynamics.compute_momentum_distribution-Tuple{AtomicElectron, Pulse}"><code>StrongFieldDynamics.compute_momentum_distribution</code></a></li><li><a href="#StrongFieldDynamics.compute_partial_wave-Tuple{Int64, Rational{Int64}, ContinuumElectron, AtomicElectron}"><code>StrongFieldDynamics.compute_partial_wave</code></a></li><li><a href="#StrongFieldDynamics.distorted_electron-Tuple{Float64, Int64, Vector{Float64}, Vector{Float64}}"><code>StrongFieldDynamics.distorted_electron</code></a></li><li><a href="#StrongFieldDynamics.inner_product-Tuple{PartialWave, AtomicElectron, Vector{Float64}}"><code>StrongFieldDynamics.inner_product</code></a></li><li><a href="#StrongFieldDynamics.plot_angular_distribution-Tuple{AngularDistribution}"><code>StrongFieldDynamics.plot_angular_distribution</code></a></li><li><a href="#StrongFieldDynamics.plot_energy_distribution-Tuple{EnergyDistribution}"><code>StrongFieldDynamics.plot_energy_distribution</code></a></li><li><a href="#StrongFieldDynamics.plot_momentum_distribution-Tuple{MomentumDistribution}"><code>StrongFieldDynamics.plot_momentum_distribution</code></a></li><li><a href="#StrongFieldDynamics.probability-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}"><code>StrongFieldDynamics.probability</code></a></li><li><a href="#StrongFieldDynamics.reduced_matrix_element-Tuple{PartialWave, AtomicElectron, Vector{Float64}}"><code>StrongFieldDynamics.reduced_matrix_element</code></a></li><li><a href="#StrongFieldDynamics.sin2Sv-Tuple{Float64, Float64, Float64, Pulse, ContinuumElectron}"><code>StrongFieldDynamics.sin2Sv</code></a></li></ul>',1)),s("details",k,[s("summary",null,[i[0]||(i[0]=s("a",{id:"StrongFieldDynamics.AngularDistribution",href:"#StrongFieldDynamics.AngularDistribution"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.AngularDistribution")],-1)),i[1]||(i[1]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AngularDistribution</span></span></code></pre></div><p>Results from angle-resolved photoelectron distribution at fixed energy and theta.</p><p><strong>Fields</strong></p><ul><li><p><code>energy::Float64</code>: Fixed photoelectron energy (a.u.)</p></li><li><p><code>θ::Float64</code>: Fixed polar angle (radians)</p></li><li><p><code>ϕ::Vector{Float64}</code>: Azimuthal angle grid (radians)</p></li><li><p><code>distribution::Vector{Float64}</code>: Angular distribution P(ϕ) at fixed θ</p></li></ul>',4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[2]||(i[2]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L236-L246",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),s("details",u,[s("summary",null,[i[4]||(i[4]=s("a",{id:"StrongFieldDynamics.AtomicElectron",href:"#StrongFieldDynamics.AtomicElectron"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.AtomicElectron")],-1)),i[5]||(i[5]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[7]||(i[7]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AtomicElectron</span></span></code></pre></div><p>Represents a bound atomic electron with quantum numbers and radial wavefunction.</p><p><strong>Fields</strong></p><ul><li><p><code>Z::Int64</code>: Atomic number</p></li><li><p><code>n::Int64</code>: Principal quantum number</p></li><li><p><code>l::Int64</code>: Orbital angular momentum quantum number</p></li><li><p><code>j::Rational{Int64}</code>: Total angular momentum quantum number</p></li><li><p><code>ε::Float64</code>: Binding energy (positive value in a.u.)</p></li><li><p><code>r::Vector{Float64}</code>: Radial grid points (a.u.)</p></li><li><p><code>P::Vector{Float64}</code>: Radial wavefunction P(r) = r·R(r)</p></li></ul>',4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[6]||(i[6]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L166-L179",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),s("details",g,[s("summary",null,[i[8]||(i[8]=s("a",{id:"StrongFieldDynamics.ContinuumElectron",href:"#StrongFieldDynamics.ContinuumElectron"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.ContinuumElectron")],-1)),i[9]||(i[9]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ContinuumElectron</span></span></code></pre></div><p>Defines a continuum (photo) electron for a particular energy.</p><p><code>ε::Float64</code> <code>p::Float64</code> <code>solution::Symbol</code></p>',3)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[10]||(i[10]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L150-L158",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),s("details",c,[s("summary",null,[i[12]||(i[12]=s("a",{id:"StrongFieldDynamics.ContinuumSolution",href:"#StrongFieldDynamics.ContinuumSolution"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.ContinuumSolution")],-1)),i[13]||(i[13]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[15]||(i[15]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ContinuumSolution</span></span></code></pre></div><p>Bessel -&gt; ... Coulomb -&gt; ... Distorted -&gt; ...</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[14]||(i[14]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L136-L142",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),s("details",y,[s("summary",null,[i[16]||(i[16]=s("a",{id:"StrongFieldDynamics.EnergyDistribution",href:"#StrongFieldDynamics.EnergyDistribution"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.EnergyDistribution")],-1)),i[17]||(i[17]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[19]||(i[19]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EnergyDistribution</span></span></code></pre></div><p>Results from energy-resolved photoelectron spectrum calculation at fixed angles.</p><p><strong>Fields</strong></p><ul><li><p><code>θ::Float64</code>: Polar angle (radians)</p></li><li><p><code>ϕ::Float64</code>: Azimuthal angle (radians)</p></li><li><p><code>energies::Vector{Float64}</code>: Energy grid (a.u.)</p></li><li><p><code>spectrum::Vector{Float64}</code>: Differential ionization probability d²P/dΩdE</p></li></ul>',4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[18]||(i[18]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L212-L222",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),s("details",E,[s("summary",null,[i[20]||(i[20]=s("a",{id:"StrongFieldDynamics.MomentumDistribution",href:"#StrongFieldDynamics.MomentumDistribution"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.MomentumDistribution")],-1)),i[21]||(i[21]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[23]||(i[23]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MomentumDistribution</span></span></code></pre></div><p>Results from momentum-resolved photoelectron distribution calculation in spherical coordinates.</p><p><strong>Fields</strong></p><ul><li><p><code>p::Vector{Float64}</code>: Momentum magnitude grid (a.u.)</p></li><li><p><code>θ::Vector{Float64}</code>: Polar angle grid (radians, 0 to π)</p></li><li><p><code>φ::Vector{Float64}</code>: Azimuthal angle grid (radians, 0 to 2π)</p></li><li><p><code>distribution::Array{Float64,3}</code>: 3D momentum distribution P(p,θ,φ)</p></li></ul>',4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[22]||(i[22]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L261-L271",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),s("details",m,[s("summary",null,[i[24]||(i[24]=s("a",{id:"StrongFieldDynamics.PartialWave",href:"#StrongFieldDynamics.PartialWave"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.PartialWave")],-1)),i[25]||(i[25]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[27]||(i[27]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PartialWave</span></span></code></pre></div><p>Represents a partial wave component of the continuum electron wavefunction.</p><p><strong>Fields</strong></p><ul><li><p><code>ε::Float64</code>: Kinetic energy (a.u.)</p></li><li><p><code>l::Int64</code>: Orbital angular momentum quantum number</p></li><li><p><code>j::Rational{Int64}</code>: Total angular momentum quantum number</p></li><li><p><code>P::Vector{Float64}</code>: Radial wavefunction component</p></li><li><p><code>δ::Float64</code>: Phase shift (radians)</p></li></ul>',4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[26]||(i[26]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L191-L202",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),s("details",F,[s("summary",null,[i[28]||(i[28]=s("a",{id:"StrongFieldDynamics.Pulse",href:"#StrongFieldDynamics.Pulse"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.Pulse")],-1)),i[29]||(i[29]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[31]||(i[31]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Pulse</span></span></code></pre></div><p>Represents a laser pulse with all necessary parameters for strong-field calculations. All internal values are stored in atomic units.</p><p><strong>Fields</strong></p><ul><li><p><code>I₀::Float64</code>: Peak intensity (W/cm²) - stored in atomic units</p></li><li><p><code>A₀::Float64</code>: Peak vector potential amplitude (a.u.)</p></li><li><p><code>λ::Float64</code>: Wavelength (nm) - stored in atomic units</p></li><li><p><code>ω::Float64</code>: Angular frequency (a.u.)</p></li><li><p><code>cycles::Int64</code>: Number of optical cycles</p></li><li><p><code>Tp::Float64</code>: Pulse duration (a.u.)</p></li><li><p><code>Up::Float64</code>: Ponderomotive energy (a.u.)</p></li><li><p><code>f::Function</code>: Envelope function f(t)</p></li><li><p><code>ϕ::Float64</code>: Carrier-envelope phase (radians)</p></li><li><p><code>helicity::Int64</code>: Helicity (+1 or -1)</p></li><li><p><code>ϵ::Float64</code>: Ellipticity parameter (0=linear, 1=circular)</p></li><li><p><code>u::QuasiVector{Float64, Tuple{UnitRange{Int64}}}</code>: Polarization unit vector</p></li><li><p><code>Sv::Function</code>: Vector potential function A(t)</p></li></ul><p><strong>Required Arguments</strong></p><ul><li><p><code>I₀</code>: Peak intensity (can include units, e.g., 1e14u&quot;W/cm^2&quot;, or numeric value assuming W/cm²)</p></li><li><p><code>λ</code>: Wavelength (can include units, e.g., 800u&quot;nm&quot;, or numeric value assuming nm)</p></li><li><p><code>cycles</code>: Number of optical cycles (positive integer)</p></li><li><p><code>envelope</code>: Envelope type (:sin2, :gauss, :flat) or custom function f(t)</p></li><li><p><code>ϕ</code>: Carrier-envelope phase in radians (default: 0.0)</p></li><li><p><code>helicity</code>: Helicity (+1 or -1, default: +1)</p></li><li><p><code>ϵ</code>: Ellipticity parameter (0=linear, 1=circular, default: 0.0)</p></li></ul><p><strong>Optional Arguments</strong></p><ul><li><code>Sv</code>: Custom vector potential function A(t) (default: t-&gt;0.0)</li></ul>',8)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[30]||(i[30]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L12-L44",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),s("details",b,[s("summary",null,[i[32]||(i[32]=s("a",{id:"StrongFieldDynamics.ClebschGordan-NTuple{6, Any}",href:"#StrongFieldDynamics.ClebschGordan-NTuple{6, Any}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.ClebschGordan")],-1)),i[33]||(i[33]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[35]||(i[35]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClebschGordan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ja, ma, jb, mb, Jab, Mab)</span></span></code></pre></div><p>Computes the Clebsch-Gordan coefficients</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[34]||(i[34]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L381-L385",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),s("details",C,[s("summary",null,[i[36]||(i[36]=s("a",{id:"StrongFieldDynamics.F1_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}",href:"#StrongFieldDynamics.F1_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.F1_integral")],-1)),i[37]||(i[37]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[39]||(i[39]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F1_integral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; sign</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the pulse shape integral of the form: \\mathcal{F}<em>1\\left[\\pm \\omega ; f ; \\mathbf{p}\\right] = A_0 e^{\\mp i \\phi</em>{\\text{CEP}}} \\int_{-\\infty}^{\\infty} d\\tau f(\\tau) e^{-i(\\varepsilon_i \\pm \\omega)\\tau + i S_p(\\tau)}, <br> Returns the integration result of type ComplexF64.</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[38]||(i[38]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/pulse-shape-integral.jl#L148-L155",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),s("details",_,[s("summary",null,[i[40]||(i[40]=s("a",{id:"StrongFieldDynamics.F1_integral_quad-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}",href:"#StrongFieldDynamics.F1_integral_quad-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.F1_integral_quad")],-1)),i[41]||(i[41]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[43]||(i[43]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F1_integral_quad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, thetap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, phip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; sign</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the pulse shape integral of the form: \\mathcal{F}<em>1\\left[\\pm \\omega ; f ; \\mathbf{p}\\right] = A_0 e^{\\mp i \\phi</em>{\\text{CEP}}} \\int_{-\\infty}^{\\infty} d\\tau f(\\tau) e^{-i(\\varepsilon_i \\pm \\omega)\\tau + i S_p(\\tau)}, <br> Returns the integration result of type <code>ComplexF64</code>.</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[42]||(i[42]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/pulse-shape-integral.jl#L7-L14",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),s("details",D,[s("summary",null,[i[44]||(i[44]=s("a",{id:"StrongFieldDynamics.F2_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}",href:"#StrongFieldDynamics.F2_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.F2_integral")],-1)),i[45]||(i[45]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[47]||(i[47]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F2_integral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ϕ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the pulse shape integral of the form: \\mathcal{F}<em>2\\left[f ; \\mathbf{p}\\right] &amp;= \\int</em>{-\\infty}^{\\infty} d\\tau A^2(\\tau) e^{-i \\varepsilon_p \\tau + i S_p(\\tau)} Returns the integration result of type ComplexF64.</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[46]||(i[46]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/pulse-shape-integral.jl#L163-L170",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),s("details",f,[s("summary",null,[i[48]||(i[48]=s("a",{id:"StrongFieldDynamics.F2_integral_quad-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}",href:"#StrongFieldDynamics.F2_integral_quad-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.F2_integral_quad")],-1)),i[49]||(i[49]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[51]||(i[51]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F2_integral_quad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, thetap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, phip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the pulse shape integral of the form: \\mathcal{F}<em>2\\left[f ; \\mathbf{p}\\right] &amp;= \\int</em>{-\\infty}^{\\infty} d\\tau A^2(\\tau) e^{-i \\varepsilon_p \\tau + i S_p(\\tau)} Returns the integration result of type ComplexF64.</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[50]||(i[50]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/pulse-shape-integral.jl#L80-L87",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[50]})]),s("details",A,[s("summary",null,[i[52]||(i[52]=s("a",{id:"StrongFieldDynamics.T0-Tuple{Pulse, AtomicElectron, ContinuumElectron, Rational{Int64}, Rational{Int64}, Float64, Float64}",href:"#StrongFieldDynamics.T0-Tuple{Pulse, AtomicElectron, ContinuumElectron, Rational{Int64}, Rational{Int64}, Float64, Float64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.T0")],-1)),i[53]||(i[53]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[55]||(i[55]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rational{Int64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rational{Int64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ϕ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the direct scattering amplitude</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[54]||(i[54]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/amplitudes.jl#L24-L28",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[54]})]),s("details",S,[s("summary",null,[i[56]||(i[56]=s("a",{id:"StrongFieldDynamics.Ylm-NTuple{4, Any}",href:"#StrongFieldDynamics.Ylm-NTuple{4, Any}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.Ylm")],-1)),i[57]||(i[57]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[59]||(i[59]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Ylm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l, m, θ, ϕ)</span></span></code></pre></div><p>Computes the Spherical hamonics using the Associated Legender Polynomials as Ylm(l, m, θ, ϕ) = Plm(l, m, cos(θ)) * exp(im_m_ϕ)</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[58]||(i[58]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L395-L400",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[58]})]),s("details",T,[s("summary",null,[i[60]||(i[60]=s("a",{id:"StrongFieldDynamics.bessel_electron-Tuple{Float64, Int64, Vector{Float64}}",href:"#StrongFieldDynamics.bessel_electron-Tuple{Float64, Int64, Vector{Float64}}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.bessel_electron")],-1)),i[61]||(i[61]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[63]||(i[63]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bessel_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ε</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">→</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Vector{Float64}, Vector{Float64}, Float64)</span></span></code></pre></div><p>Computes the free electron continuum wavefunction using spherical Bessel functions.</p><p><strong>Arguments</strong></p><ul><li><p><code>ε::Float64</code>: Kinetic energy of the free electron (in atomic units)</p></li><li><p><code>l::Int64</code>: Orbital angular momentum quantum number</p></li><li><p><code>r::Vector{Float64}</code>: Radial grid points (in bohr)</p></li></ul><p><strong>Returns</strong></p><ul><li><p><code>r::Vector{Float64}</code>: Input radial grid</p></li><li><p><code>P::Vector{Float64}</code>: Radial wavefunction P(r) = r * jₗ(pr)</p></li><li><p><code>δ::Float64</code>: Phase shift (always 0.0 for free electrons)</p></li></ul><p><strong>Physics</strong></p><p>For a free electron in the absence of any potential, the radial wavefunction is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>P(r) = r * jₗ(pr)</span></span></code></pre></div><p>where jₗ is the spherical Bessel function of order l, and p = √(2ε) is the momentum.</p><p>This represents the exact solution to the Schrödinger equation with V(r) = 0.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r_grid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">energy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 1 Hartree kinetic energy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # p-wave</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r, P, phase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bessel_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(energy, l, r_grid)</span></span></code></pre></div>`,13)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[62]||(i[62]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/electron-wavefunction.jl#L153-L185",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[62]})]),s("details",v,[s("summary",null,[i[64]||(i[64]=s("a",{id:"StrongFieldDynamics.compute_angular_distribution-Tuple{AtomicElectron, Pulse}",href:"#StrongFieldDynamics.compute_angular_distribution-Tuple{AtomicElectron, Pulse}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.compute_angular_distribution")],-1)),i[65]||(i[65]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[67]||(i[67]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compute_angular_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bound</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; energy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            ϕ_range</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Float64,Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2π</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            n_ϕ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AngularDistribution</span></span></code></pre></div><p>Computes the angular distribution of photoelectrons at fixed energy and theta using SFA.</p><p><strong>Arguments</strong></p><ul><li><p><code>a_electron::AtomicElectron</code>: Initial bound state</p></li><li><p><code>pulse::Pulse</code>: Laser pulse parameters</p></li><li><p><code>energy::Float64=1.0</code>: Fixed photoelectron energy (a.u.)</p></li><li><p><code>θ::Real=pi/2</code>: Fixed polar angle (radians)</p></li><li><p><code>ϕ_range::Tuple{Float64,Float64}=(0.0, 2π)</code>: Azimuthal angle range (radians)</p></li><li><p><code>n_ϕ::Int=200</code>: Number of azimuthal angle points</p></li></ul>`,4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[66]||(i[66]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L318-L334",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[66]})]),s("details",j,[s("summary",null,[i[68]||(i[68]=s("a",{id:"StrongFieldDynamics.compute_atomic_electron-Tuple{Int64, Int64, Int64}",href:"#StrongFieldDynamics.compute_atomic_electron-Tuple{Int64, Int64, Int64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.compute_atomic_electron")],-1)),i[69]||(i[69]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[71]||(i[71]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compute_atomic_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; ip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">→</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AtomicElectron</span></span></code></pre></div><p>Computes the atomic electron wavefunction for specified quantum numbers.</p><p><strong>Arguments</strong></p><ul><li><p><code>Z::Int64</code>: Atomic number (nuclear charge)</p></li><li><p><code>n::Int64</code>: Principal quantum number</p></li><li><p><code>l::Int64</code>: Orbital angular momentum quantum number</p></li><li><p><code>ip::Float64=0.0</code>: Ionization potential in atomic units (Hartree). If 0.0, uses default values.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>AtomicElectron</code>: Structure containing the radial wavefunction and quantum numbers</li></ul><p><strong>Supported Atoms and Orbitals</strong></p><ul><li><p><strong>Lithium (Z=3)</strong>: 1s, 2s orbitals</p></li><li><p><strong>Neon (Z=10)</strong>: 1s, 2p orbitals</p></li><li><p><strong>Argon (Z=18)</strong>: 1s, 3p orbitals</p></li><li><p><strong>Krypton (Z=36)</strong>: 1s, 4p orbitals</p></li><li><p><strong>Xenon (Z=54)</strong>: 1s, 5p orbitals</p></li></ul><p><strong>Physics</strong></p><p>The function loads pre-computed Hartree-Fock or Dirac-Fock wavefunctions from data files. These represent accurate many-electron atomic wavefunctions that account for electron correlation and relativistic effects where applicable.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Lithium 2s electron</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li_2s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compute_atomic_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Neon 2p electron with custom ionization potential</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ne_2p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compute_atomic_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; ip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 0.8 Hartree</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Argon 3p electron</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ar_3p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compute_atomic_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Notes</strong></p><ul><li><p>Ionization potentials are converted from eV to atomic units (÷27.21138)</p></li><li><p>Data files contain radial positions and corresponding wavefunction values</p></li><li><p>Interpolation is performed to ensure smooth wavefunction representation</p></li></ul>`,14)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[70]||(i[70]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/electron-wavefunction.jl#L25-L67",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[70]})]),s("details",B,[s("summary",null,[i[72]||(i[72]=s("a",{id:"StrongFieldDynamics.compute_energy_distribution-Tuple{AtomicElectron, Pulse}",href:"#StrongFieldDynamics.compute_energy_distribution-Tuple{AtomicElectron, Pulse}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.compute_energy_distribution")],-1)),i[73]||(i[73]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[75]||(i[75]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compute_energy_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ϕ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                           energy_range</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Float64,Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1e-6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), n_points</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EnergyDistribution</span></span></code></pre></div><p>Computes the energy-resolved photoelectron spectrum at specified angles using SFA.</p><p><strong>Arguments</strong></p><ul><li><p><code>a_electron::AtomicElectron</code>: Initial bound state</p></li><li><p><code>pulse::Pulse</code>: Laser pulse parameters</p></li><li><p><code>θ::Real=π/2</code>: Polar detection angle (radians)</p></li><li><p><code>ϕ::Real=0.0</code>: Azimuthal detection angle (radians)</p></li><li><p><code>energy_range::Tuple{Float64,Float64}=(0.0, 0.5)</code>: Energy range (a.u.)</p></li><li><p><code>n_points::Int64=200</code>: Number of energy points</p></li></ul>`,4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[74]||(i[74]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L286-L299",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[74]})]),s("details",P,[s("summary",null,[i[76]||(i[76]=s("a",{id:"StrongFieldDynamics.compute_momentum_distribution-Tuple{AtomicElectron, Pulse}",href:"#StrongFieldDynamics.compute_momentum_distribution-Tuple{AtomicElectron, Pulse}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.compute_momentum_distribution")],-1)),i[77]||(i[77]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[79]||(i[79]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compute_momentum_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bound</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; p_max</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             n_p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_φ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MomentumDistribution</span></span></code></pre></div><p>Computes the 3D momentum distribution of photoelectrons using SFA in spherical coordinates.</p><p><strong>Arguments</strong></p><ul><li><p><code>a_electron::AtomicElectron</code>: Initial bound state</p></li><li><p><code>pulse::Pulse</code>: Laser pulse parameters</p></li><li><p><code>p_max::Float64=2.0</code>: Maximum momentum magnitude (a.u.)</p></li><li><p><code>n_p::Int=50</code>: Number of momentum magnitude points</p></li><li><p><code>n_θ::Int=25</code>: Number of polar angle points</p></li><li><p><code>n_φ::Int=50</code>: Number of azimuthal angle points</p></li></ul>`,4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[78]||(i[78]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/types-fucntions.jl#L353-L367",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[78]})]),s("details",x,[s("summary",null,[i[80]||(i[80]=s("a",{id:"StrongFieldDynamics.compute_partial_wave-Tuple{Int64, Rational{Int64}, ContinuumElectron, AtomicElectron}",href:"#StrongFieldDynamics.compute_partial_wave-Tuple{Int64, Rational{Int64}, ContinuumElectron, AtomicElectron}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.compute_partial_wave")],-1)),i[81]||(i[81]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[83]||(i[83]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compute_partial_wave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rational{Int64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">→</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PartialWave</span></span></code></pre></div><p>Computes a partial wave for photoionization calculations.</p><p><strong>Arguments</strong></p><ul><li><p><code>l::Int64</code>: Orbital angular momentum quantum number</p></li><li><p><code>j::Rational{Int64}</code>: Total angular momentum quantum number (j = l ± 1/2)</p></li><li><p><code>p_electron::ContinuumElectron</code>: Continuum electron specification (energy, solution type)</p></li><li><p><code>a_electron::AtomicElectron</code>: Bound atomic electron data</p></li></ul><p><strong>Returns</strong></p><ul><li><code>PartialWave</code>: Structure containing energy, quantum numbers, wavefunction, and phase shift</li></ul><p><strong>Physics</strong></p><p>Computes the continuum electron partial wave corresponding to the photoionization transition from the bound atomic orbital. The choice of solution method (Bessel vs Distorted) affects the accuracy:</p><ul><li><p><strong>Bessel</strong>: Free electron approximation, ignores atomic potential</p></li><li><p><strong>Distorted</strong>: Includes scattering from atomic potential (more accurate)</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set up bound and continuum electrons</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">atom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compute_atomic_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Ar 3p</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">continuum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Distorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1 Hartree, distorted wave</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Compute p-wave (l=1) partial wave</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">partial_wave </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compute_partial_wave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, continuum, atom)</span></span></code></pre></div><p><strong>Notes</strong></p><ul><li><p>The radial grid from the atomic electron is used for the continuum calculation</p></li><li><p>Phase shifts are important for interference effects in photoionization</p></li><li><p>Distorted waves require the atomic potential (currently needs rV to be defined)</p></li></ul>`,13)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[82]||(i[82]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/electron-wavefunction.jl#L273-L309",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[82]})]),s("details",I,[s("summary",null,[i[84]||(i[84]=s("a",{id:"StrongFieldDynamics.distorted_electron-Tuple{Float64, Int64, Vector{Float64}, Vector{Float64}}",href:"#StrongFieldDynamics.distorted_electron-Tuple{Float64, Int64, Vector{Float64}, Vector{Float64}}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.distorted_electron")],-1)),i[85]||(i[85]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[87]||(i[87]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">distorted_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ε</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">→</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Vector{Float64}, Vector{Float64}, Float64)</span></span></code></pre></div><p>Computes the distorted wave continuum electron wavefunction in an atomic potential.</p><p><strong>Arguments</strong></p><ul><li><p><code>ε::Float64</code>: Kinetic energy of the electron (in atomic units)</p></li><li><p><code>l::Int64</code>: Orbital angular momentum quantum number</p></li><li><p><code>r::Vector{Float64}</code>: Radial grid points (in bohr)</p></li><li><p><code>rV::Vector{Float64}</code>: Potential energy array V(r) at grid points (in atomic units)</p></li></ul><p><strong>Returns</strong></p><ul><li><p><code>r::Vector{Float64}</code>: Input radial grid</p></li><li><p><code>P::Vector{Float64}</code>: Normalized radial wavefunction P(r)</p></li><li><p><code>δ::Float64</code>: Total phase shift (inner + Coulomb contributions)</p></li></ul><p><strong>Physics</strong></p><p>Solves the radial Schrödinger equation with the given potential:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>d²P/dr² + [2ε - 2V(r) - l(l+1)/r²]P = 0</span></span></code></pre></div><p>The wavefunction asymptotically behaves as:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>P(r) → sin(pr - lπ/2 + δₗ) / p    as r → ∞</span></span></code></pre></div><p>This accounts for scattering from the atomic potential, providing more accurate wavefunctions for photoionization calculations than free electron approximations.</p><p><strong>Implementation</strong></p><p>Uses a Fortran library (mod_sfree.so) for numerical integration of the radial Schrödinger equation with proper boundary conditions.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r_grid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">V_coulomb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ./</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r_grid  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Hydrogen-like potential</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">energy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 0.5 Hartree kinetic energy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r, P, delta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> distorted_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(energy, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r_grid, V_coulomb)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;s-wave phase shift: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, delta, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; radians&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,16)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[86]||(i[86]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/electron-wavefunction.jl#L198-L241",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[86]})]),s("details",V,[s("summary",null,[i[88]||(i[88]=s("a",{id:"StrongFieldDynamics.inner_product-Tuple{PartialWave, AtomicElectron, Vector{Float64}}",href:"#StrongFieldDynamics.inner_product-Tuple{PartialWave, AtomicElectron, Vector{Float64}}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.inner_product")],-1)),i[89]||(i[89]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[91]||(i[91]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inner_product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p_partialwave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PartialWave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculates the inner product of continuum and bound (atomic) electron radial wavefunction</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[90]||(i[90]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/amplitudes.jl#L144-L148",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[90]})]),s("details",R,[s("summary",null,[i[92]||(i[92]=s("a",{id:"StrongFieldDynamics.plot_angular_distribution-Tuple{AngularDistribution}",href:"#StrongFieldDynamics.plot_angular_distribution-Tuple{AngularDistribution}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.plot_angular_distribution")],-1)),i[93]||(i[93]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[95]||(i[95]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_angular_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AngularDistribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, save_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                         plot_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:polar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot the angular distribution of photoelectrons at fixed energy and theta.</p><p><strong>Arguments</strong></p><ul><li><p><code>ad::AngularDistribution</code>: Angular distribution data to plot</p></li><li><p><code>title::String=&quot;&quot;</code>: Plot title (auto-generated if empty)</p></li><li><p><code>save_path::String=&quot;&quot;</code>: Path to save the plot (optional)</p></li><li><p><code>plot_type::Symbol=:polar</code>: Plot type (:polar for polar plot, :cartesian for line plot)</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Figure</code>: CairoMakie figure object</li></ul>`,6)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[94]||(i[94]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/plots.jl#L61-L75",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[94]})]),s("details",q,[s("summary",null,[i[96]||(i[96]=s("a",{id:"StrongFieldDynamics.plot_energy_distribution-Tuple{EnergyDistribution}",href:"#StrongFieldDynamics.plot_energy_distribution-Tuple{EnergyDistribution}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.plot_energy_distribution")],-1)),i[97]||(i[97]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[99]||(i[99]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_energy_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EnergyDistribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xlabel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Energy (a.u.)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        ylabel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Differential Probability d²P/dΩdE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, save_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot the energy distribution of photoelectrons with proper labels.</p><p><strong>Arguments</strong></p><ul><li><p><code>ed::EnergyDistribution</code>: Energy distribution data to plot</p></li><li><p><code>title::String=&quot;&quot;</code>: Plot title (auto-generated if empty)</p></li><li><p><code>xlabel::String=&quot;Energy (a.u.)&quot;</code>: X-axis label</p></li><li><p><code>ylabel::String=&quot;Differential Probability d²P/dΩdE&quot;</code>: Y-axis label</p></li><li><p><code>save_path::String=&quot;&quot;</code>: Path to save the plot (optional)</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Figure</code>: CairoMakie figure object</li></ul>`,6)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[98]||(i[98]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/plots.jl#L5-L20",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[98]})]),s("details",L,[s("summary",null,[i[100]||(i[100]=s("a",{id:"StrongFieldDynamics.plot_momentum_distribution-Tuple{MomentumDistribution}",href:"#StrongFieldDynamics.plot_momentum_distribution-Tuple{MomentumDistribution}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.plot_momentum_distribution")],-1)),i[101]||(i[101]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[103]||(i[103]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_momentum_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(md</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MomentumDistribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, save_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                           slice_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:p_slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, slice_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                           colormap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:viridis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot the momentum distribution of photoelectrons with different visualization options.</p><p><strong>Arguments</strong></p><ul><li><p><code>md::MomentumDistribution</code>: Momentum distribution data to plot</p></li><li><p><code>title::String=&quot;&quot;</code>: Plot title (auto-generated if empty)</p></li><li><p><code>save_path::String=&quot;&quot;</code>: Path to save the plot (optional)</p></li><li><p><code>slice_type::Symbol=:p_slice</code>: Type of slice (:p_slice for fixed p, :theta_slice for fixed θ, :phi_slice for fixed φ)</p></li><li><p><code>slice_value::Float64=1.0</code>: Value at which to take the slice</p></li><li><p><code>colormap=:viridis</code>: Colormap for heatmaps</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Figure</code>: CairoMakie figure object</li></ul>`,6)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[102]||(i[102]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/plots.jl#L136-L153",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[102]})]),s("details",M,[s("summary",null,[i[104]||(i[104]=s("a",{id:"StrongFieldDynamics.probability-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}",href:"#StrongFieldDynamics.probability-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64, Float64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.probability")],-1)),i[105]||(i[105]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[107]||(i[107]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">probality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculates the ionization probability</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[106]||(i[106]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/amplitudes.jl#L4-L8",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[106]})]),s("details",w,[s("summary",null,[i[108]||(i[108]=s("a",{id:"StrongFieldDynamics.reduced_matrix_element-Tuple{PartialWave, AtomicElectron, Vector{Float64}}",href:"#StrongFieldDynamics.reduced_matrix_element-Tuple{PartialWave, AtomicElectron, Vector{Float64}}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.reduced_matrix_element")],-1)),i[109]||(i[109]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[111]||(i[111]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reduced_matrix_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(εp, lp, jp, n, l, j)</span></span></code></pre></div><p>Computes the reduced matrix element <code>&lt;εp lp jp || p || n l j&gt;</code></p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[110]||(i[110]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/amplitudes.jl#L95-L99",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[110]})]),s("details",N,[s("summary",null,[i[112]||(i[112]=s("a",{id:"StrongFieldDynamics.sin2Sv-Tuple{Float64, Float64, Float64, Pulse, ContinuumElectron}",href:"#StrongFieldDynamics.sin2Sv-Tuple{Float64, Float64, Float64, Pulse, ContinuumElectron}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.sin2Sv")],-1)),i[113]||(i[113]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[115]||(i[115]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sin2Sv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Defines the Volkov phase integral over time for a sin² envelope.</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[114]||(i[114]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/00ba62d40e03987a3989d08eeb955ad90204b31e/src/pulse-shape-integral.jl#L184-L188",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[114]})])])}const U=o(d,[["render",O]]);export{K as __pageData,U as default};
