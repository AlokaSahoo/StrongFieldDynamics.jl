import{_ as o,C as r,c as p,o as d,aA as n,j as s,G as e,a as l,w as a}from"./chunks/framework.QfZinlYu.js";const V=JSON.parse('{"title":"StrongFieldDynamics","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),c={name:"index.md"},h={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""};function D(T,i,j,A,v,x){const t=r("Badge");return d(),p("div",null,[i[52]||(i[52]=n('<h1 id="StrongFieldDynamics" tabindex="-1">StrongFieldDynamics <a class="header-anchor" href="#StrongFieldDynamics" aria-label="Permalink to &quot;StrongFieldDynamics {#StrongFieldDynamics}&quot;">​</a></h1><p>Documentation for <a href="https://github.com/AlokaSahoo/StrongFieldDynamics.jl" target="_blank" rel="noreferrer">StrongFieldDynamics</a>.</p><p>A Julia package for studying intense laser-atom interactions under strong field approximation using the partial wave approximation approach.</p><p>The package provides several approaches to consider the influence of atomic potential to the ionized electron.</p><p>With the future scope to include HHG and other processes into account.</p><ul><li><a href="#StrongFieldDynamics.ContinuumSolution"><code>StrongFieldDynamics.ContinuumSolution</code></a></li><li><a href="#StrongFieldDynamics.ClebschGordan-NTuple{6, Any}"><code>StrongFieldDynamics.ClebschGordan</code></a></li><li><a href="#StrongFieldDynamics.F1_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}"><code>StrongFieldDynamics.F1_integral</code></a></li><li><a href="#StrongFieldDynamics.F2_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}"><code>StrongFieldDynamics.F2_integral</code></a></li><li><a href="#StrongFieldDynamics.T0-Tuple{Pulse, AtomicElectron, ContinuumElectron, Rational{Int64}, Rational{Int64}, Float64, Float64}"><code>StrongFieldDynamics.T0</code></a></li><li><a href="#StrongFieldDynamics.Ylm-NTuple{4, Any}"><code>StrongFieldDynamics.Ylm</code></a></li><li><a href="#StrongFieldDynamics.atomic_electron-Tuple{Int64, Int64}"><code>StrongFieldDynamics.atomic_electron</code></a></li><li><a href="#StrongFieldDynamics.bessel_electron-Tuple{Float64, Int64, Vector{Float64}}"><code>StrongFieldDynamics.bessel_electron</code></a></li><li><a href="#StrongFieldDynamics.distorted_electron-Tuple{Float64, Int64, Vector{Float64}, Vector{Float64}}"><code>StrongFieldDynamics.distorted_electron</code></a></li><li><a href="#StrongFieldDynamics.inner_product-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}"><code>StrongFieldDynamics.inner_product</code></a></li><li><a href="#StrongFieldDynamics.probability-Tuple{Pulse, AtomicElectron, ContinuumElectron}"><code>StrongFieldDynamics.probability</code></a></li><li><a href="#StrongFieldDynamics.reduced_matrix_element-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}"><code>StrongFieldDynamics.reduced_matrix_element</code></a></li><li><a href="#StrongFieldDynamics.sin2Sv-Tuple{Float64, Float64, Pulse, AtomicElectron, ContinuumElectron}"><code>StrongFieldDynamics.sin2Sv</code></a></li></ul>',6)),s("details",h,[s("summary",null,[i[0]||(i[0]=s("a",{id:"StrongFieldDynamics.ContinuumSolution",href:"#StrongFieldDynamics.ContinuumSolution"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.ContinuumSolution")],-1)),i[1]||(i[1]=l()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ContinuumSolution</span></span></code></pre></div><p>Bessel -&gt; ... Coulomb -&gt; ... Distorted -&gt; ...</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[2]||(i[2]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/types-fucntions.jl#L25-L31",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),s("details",k,[s("summary",null,[i[4]||(i[4]=s("a",{id:"StrongFieldDynamics.ClebschGordan-NTuple{6, Any}",href:"#StrongFieldDynamics.ClebschGordan-NTuple{6, Any}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.ClebschGordan")],-1)),i[5]||(i[5]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[7]||(i[7]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClebschGordan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ja, ma, jb, mb, Jab, Mab)</span></span></code></pre></div><p>Computes the Clebsch-Gordan coefficients</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[6]||(i[6]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/types-fucntions.jl#L65-L69",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),s("details",u,[s("summary",null,[i[8]||(i[8]=s("a",{id:"StrongFieldDynamics.F1_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}",href:"#StrongFieldDynamics.F1_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.F1_integral")],-1)),i[9]||(i[9]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[11]||(i[11]=s("p",null,"The pulse shape integral",-1)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[10]||(i[10]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/pulse-shape-integral.jl#L6-L8",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),s("details",g,[s("summary",null,[i[12]||(i[12]=s("a",{id:"StrongFieldDynamics.F2_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}",href:"#StrongFieldDynamics.F2_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.F2_integral")],-1)),i[13]||(i[13]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[15]||(i[15]=s("p",null,"The pulse shape integral",-1)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[14]||(i[14]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/pulse-shape-integral.jl#L16-L18",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),s("details",m,[s("summary",null,[i[16]||(i[16]=s("a",{id:"StrongFieldDynamics.T0-Tuple{Pulse, AtomicElectron, ContinuumElectron, Rational{Int64}, Rational{Int64}, Float64, Float64}",href:"#StrongFieldDynamics.T0-Tuple{Pulse, AtomicElectron, ContinuumElectron, Rational{Int64}, Rational{Int64}, Float64, Float64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.T0")],-1)),i[17]||(i[17]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[19]||(i[19]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rational{Int64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rational{Int64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ϕ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the direct scattering amplitude</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[18]||(i[18]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/amplitudes.jl#L24-L28",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),s("details",y,[s("summary",null,[i[20]||(i[20]=s("a",{id:"StrongFieldDynamics.Ylm-NTuple{4, Any}",href:"#StrongFieldDynamics.Ylm-NTuple{4, Any}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.Ylm")],-1)),i[21]||(i[21]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[23]||(i[23]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Ylm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l, m, θ, ϕ)</span></span></code></pre></div><p>Computes the Spherical hamonics using the Associated Legender Polynomials as Ylm(l, m, θ, ϕ) = Plm(l, m, cos(θ)) * exp(im_m_ϕ)</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[22]||(i[22]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/types-fucntions.jl#L79-L84",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),s("details",F,[s("summary",null,[i[24]||(i[24]=s("a",{id:"StrongFieldDynamics.atomic_electron-Tuple{Int64, Int64}",href:"#StrongFieldDynamics.atomic_electron-Tuple{Int64, Int64}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.atomic_electron")],-1)),i[25]||(i[25]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[27]||(i[27]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">atomic_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the atomic electron wavefunction for the corresponding <code>n</code> &amp; <code>l</code> Principal and Orbital quantum numbers, repectively.</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[26]||(i[26]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/electron-wavefunction.jl#L11-L15",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),s("details",b,[s("summary",null,[i[28]||(i[28]=s("a",{id:"StrongFieldDynamics.bessel_electron-Tuple{Float64, Int64, Vector{Float64}}",href:"#StrongFieldDynamics.bessel_electron-Tuple{Float64, Int64, Vector{Float64}}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.bessel_electron")],-1)),i[29]||(i[29]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[31]||(i[31]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bessel_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ε</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Flost64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the radial part of the continuum (free) electron with Bessel function <code>P (r) = r jₗ(pr)</code> Returns the radial wavefunction of type <code>Vector{Float64}</code></p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[30]||(i[30]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/electron-wavefunction.jl#L32-L38",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),s("details",E,[s("summary",null,[i[32]||(i[32]=s("a",{id:"StrongFieldDynamics.distorted_electron-Tuple{Float64, Int64, Vector{Float64}, Vector{Float64}}",href:"#StrongFieldDynamics.distorted_electron-Tuple{Float64, Int64, Vector{Float64}, Vector{Float64}}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.distorted_electron")],-1)),i[33]||(i[33]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[35]||(i[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">distorted_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ε</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the distorted wave function of continuum photo electron with Bessel function Returns the radial wavefunction and phase-shift of type <code>(Vector{Float64}, Float64)</code></p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[34]||(i[34]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/electron-wavefunction.jl#L50-L55",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),s("details",_,[s("summary",null,[i[36]||(i[36]=s("a",{id:"StrongFieldDynamics.inner_product-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}",href:"#StrongFieldDynamics.inner_product-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.inner_product")],-1)),i[37]||(i[37]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[39]||(i[39]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inner_product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p_partialwave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PartialWave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculates the inner product of continuum and bound (atomic) electron radial wavefunction</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[38]||(i[38]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/amplitudes.jl#L134-L138",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),s("details",C,[s("summary",null,[i[40]||(i[40]=s("a",{id:"StrongFieldDynamics.probability-Tuple{Pulse, AtomicElectron, ContinuumElectron}",href:"#StrongFieldDynamics.probability-Tuple{Pulse, AtomicElectron, ContinuumElectron}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.probability")],-1)),i[41]||(i[41]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[43]||(i[43]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">probality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculates the ionization probability</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[42]||(i[42]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/amplitudes.jl#L4-L8",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),s("details",S,[s("summary",null,[i[44]||(i[44]=s("a",{id:"StrongFieldDynamics.reduced_matrix_element-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}",href:"#StrongFieldDynamics.reduced_matrix_element-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.reduced_matrix_element")],-1)),i[45]||(i[45]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[47]||(i[47]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reduced_matrix_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(εp, lp, jp, n, l, j)</span></span></code></pre></div><p>Computes the reduced matrix element <code>&lt;εp lp jp || p || n l j&gt;</code></p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[46]||(i[46]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/amplitudes.jl#L85-L89",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),s("details",f,[s("summary",null,[i[48]||(i[48]=s("a",{id:"StrongFieldDynamics.sin2Sv-Tuple{Float64, Float64, Pulse, AtomicElectron, ContinuumElectron}",href:"#StrongFieldDynamics.sin2Sv-Tuple{Float64, Float64, Pulse, AtomicElectron, ContinuumElectron}"},[s("span",{class:"jlbinding"},"StrongFieldDynamics.sin2Sv")],-1)),i[49]||(i[49]=l()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[51]||(i[51]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sin2Sv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Defines a sin² envelope.</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>i[50]||(i[50]=[s("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/6844ee5456975df37c6c7c6242909ae3eb75a16b/src/pulse-shape-integral.jl#L32-L36",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[50]})])])}const I=o(c,[["render",D]]);export{V as __pageData,I as default};
