import{_ as o,C as r,c as p,o as d,aA as n,j as t,G as e,a,w as l}from"./chunks/framework.QfZinlYu.js";const I=JSON.parse('{"title":"StrongFieldDynamics","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),c={name:"index.md"},h={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""};function D(T,i,j,A,v,x){const s=r("Badge");return d(),p("div",null,[i[52]||(i[52]=n('<h1 id="StrongFieldDynamics" tabindex="-1">StrongFieldDynamics <a class="header-anchor" href="#StrongFieldDynamics" aria-label="Permalink to &quot;StrongFieldDynamics {#StrongFieldDynamics}&quot;">​</a></h1><p>Documentation for <a href="https://github.com/AlokaSahoo/StrongFieldDynamics.jl" target="_blank" rel="noreferrer">StrongFieldDynamics</a>.</p><p><strong>StrongFieldDynamics.jl</strong> is a Julia package designed for the theoretical study of atomic ionization processes in the presence of intense laser fields. The package implements the strong field approximation (SFA) using the partial wave expansion approach, enabling accurate and efficient simulations of laser-atom interactions.</p><h2 id="Overview" tabindex="-1">Overview <a class="header-anchor" href="#Overview" aria-label="Permalink to &quot;Overview {#Overview}&quot;">​</a></h2><p>The package provides a flexible framework to model and analyze the ionization dynamics of atomic systems subjected to ultrashort, high-intensity laser pulses. By leveraging the partial wave expansion, StrongFieldDynamics.jl allows for the decomposition of the electron wavefunction into angular momentum components, facilitating detailed studies of angular distributions and multiphoton processes.</p><h2 id="Key-Features" tabindex="-1">Key Features <a class="header-anchor" href="#Key-Features" aria-label="Permalink to &quot;Key Features {#Key-Features}&quot;">​</a></h2><ul><li><p><strong>Partial Wave Expansion:</strong> Efficiently expands the continuum electron wavefunction in terms of spherical harmonics, capturing angular effects in ionization.</p></li><li><p><strong>Strong Field Approximation (SFA):</strong> Implements SFA for modeling direct ionization and rescattering processes.</p></li><li><p><strong>Atomic Potential Effects:</strong> Includes several approaches to account for the influence of the atomic potential on the ionized electron, beyond the plain SFA.</p></li><li><p><strong>Customizable Laser Pulses:</strong> Supports a variety of laser pulse shapes, durations, and polarization schemes.</p></li><li><p><strong>Observables Calculation:</strong> Computes ionization rates, photoelectron spectra, and angular distributions.</p></li><li><p><strong>Extensible Framework:</strong> Modular design for easy extension to new atomic systems or laser configurations.</p></li></ul><h2 id="Applications" tabindex="-1">Applications <a class="header-anchor" href="#Applications" aria-label="Permalink to &quot;Applications {#Applications}&quot;">​</a></h2><ul><li><p>Study of multiphoton and tunneling ionization in atoms.</p></li><li><p>Analysis of angular and energy-resolved photoelectron spectra.</p></li><li><p>Investigation of strong-field phenomena such as above-threshold ionization (ATI) and rescattering.</p></li><li><p>Benchmarking and comparison with experimental data.</p></li></ul><h2 id="Future-Scope" tabindex="-1">Future Scope <a class="header-anchor" href="#Future-Scope" aria-label="Permalink to &quot;Future Scope {#Future-Scope}&quot;">​</a></h2><p>Planned extensions include:</p><ul><li><p>High Harmonic Generation (HHG) modeling.</p></li><li><p>Inclusion of more complex atomic and molecular targets.</p></li><li><p>Support for additional strong-field processes and advanced numerical techniques.</p></li></ul><h2 id="Documentation-Structure" tabindex="-1">Documentation Structure <a class="header-anchor" href="#Documentation-Structure" aria-label="Permalink to &quot;Documentation Structure {#Documentation-Structure}&quot;">​</a></h2><ul><li><a href="./theory">Theory</a>: Detailed background on the strong field approximation, partial wave expansion, and the physical models implemented.</li></ul><h2 id="Getting-Started" tabindex="-1">Getting Started <a class="header-anchor" href="#Getting-Started" aria-label="Permalink to &quot;Getting Started {#Getting-Started}&quot;">​</a></h2><p>To get started, see the <a href="https://github.com/AlokaSahoo/StrongFieldDynamics.jl#installation" target="_blank" rel="noreferrer">installation instructions</a> and the usage examples in the documentation.</p><ul><li><a href="#StrongFieldDynamics.ContinuumSolution"><code>StrongFieldDynamics.ContinuumSolution</code></a></li><li><a href="#StrongFieldDynamics.ClebschGordan-NTuple{6, Any}"><code>StrongFieldDynamics.ClebschGordan</code></a></li><li><a href="#StrongFieldDynamics.F1_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}"><code>StrongFieldDynamics.F1_integral</code></a></li><li><a href="#StrongFieldDynamics.F2_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}"><code>StrongFieldDynamics.F2_integral</code></a></li><li><a href="#StrongFieldDynamics.T0-Tuple{Pulse, AtomicElectron, ContinuumElectron, Rational{Int64}, Rational{Int64}, Float64, Float64}"><code>StrongFieldDynamics.T0</code></a></li><li><a href="#StrongFieldDynamics.Ylm-NTuple{4, Any}"><code>StrongFieldDynamics.Ylm</code></a></li><li><a href="#StrongFieldDynamics.atomic_electron-Tuple{Int64, Int64}"><code>StrongFieldDynamics.atomic_electron</code></a></li><li><a href="#StrongFieldDynamics.bessel_electron-Tuple{Float64, Int64, Vector{Float64}}"><code>StrongFieldDynamics.bessel_electron</code></a></li><li><a href="#StrongFieldDynamics.distorted_electron-Tuple{Float64, Int64, Vector{Float64}, Vector{Float64}}"><code>StrongFieldDynamics.distorted_electron</code></a></li><li><a href="#StrongFieldDynamics.inner_product-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}"><code>StrongFieldDynamics.inner_product</code></a></li><li><a href="#StrongFieldDynamics.probability-Tuple{Pulse, AtomicElectron, ContinuumElectron}"><code>StrongFieldDynamics.probability</code></a></li><li><a href="#StrongFieldDynamics.reduced_matrix_element-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}"><code>StrongFieldDynamics.reduced_matrix_element</code></a></li><li><a href="#StrongFieldDynamics.sin2Sv-Tuple{Float64, Float64, Pulse, AtomicElectron, ContinuumElectron}"><code>StrongFieldDynamics.sin2Sv</code></a></li></ul>',17)),t("details",h,[t("summary",null,[i[0]||(i[0]=t("a",{id:"StrongFieldDynamics.ContinuumSolution",href:"#StrongFieldDynamics.ContinuumSolution"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.ContinuumSolution")],-1)),i[1]||(i[1]=a()),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ContinuumSolution</span></span></code></pre></div><p>Bessel -&gt; ... Coulomb -&gt; ... Distorted -&gt; ...</p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[2]||(i[2]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/types-fucntions.jl#L25-L31",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),t("details",u,[t("summary",null,[i[4]||(i[4]=t("a",{id:"StrongFieldDynamics.ClebschGordan-NTuple{6, Any}",href:"#StrongFieldDynamics.ClebschGordan-NTuple{6, Any}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.ClebschGordan")],-1)),i[5]||(i[5]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[7]||(i[7]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClebschGordan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ja, ma, jb, mb, Jab, Mab)</span></span></code></pre></div><p>Computes the Clebsch-Gordan coefficients</p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[6]||(i[6]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/types-fucntions.jl#L65-L69",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),t("details",k,[t("summary",null,[i[8]||(i[8]=t("a",{id:"StrongFieldDynamics.F1_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}",href:"#StrongFieldDynamics.F1_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.F1_integral")],-1)),i[9]||(i[9]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[11]||(i[11]=t("p",null,"The pulse shape integral",-1)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[10]||(i[10]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/pulse-shape-integral.jl#L6-L8",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),t("details",g,[t("summary",null,[i[12]||(i[12]=t("a",{id:"StrongFieldDynamics.F2_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}",href:"#StrongFieldDynamics.F2_integral-Tuple{Pulse, AtomicElectron, ContinuumElectron, Float64}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.F2_integral")],-1)),i[13]||(i[13]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[15]||(i[15]=t("p",null,"The pulse shape integral",-1)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[14]||(i[14]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/pulse-shape-integral.jl#L16-L18",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),t("details",m,[t("summary",null,[i[16]||(i[16]=t("a",{id:"StrongFieldDynamics.T0-Tuple{Pulse, AtomicElectron, ContinuumElectron, Rational{Int64}, Rational{Int64}, Float64, Float64}",href:"#StrongFieldDynamics.T0-Tuple{Pulse, AtomicElectron, ContinuumElectron, Rational{Int64}, Rational{Int64}, Float64, Float64}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.T0")],-1)),i[17]||(i[17]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[19]||(i[19]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rational{Int64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rational{Int64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ϕ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the direct scattering amplitude</p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[18]||(i[18]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/amplitudes.jl#L24-L28",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),t("details",y,[t("summary",null,[i[20]||(i[20]=t("a",{id:"StrongFieldDynamics.Ylm-NTuple{4, Any}",href:"#StrongFieldDynamics.Ylm-NTuple{4, Any}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.Ylm")],-1)),i[21]||(i[21]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[23]||(i[23]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Ylm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l, m, θ, ϕ)</span></span></code></pre></div><p>Computes the Spherical hamonics using the Associated Legender Polynomials as Ylm(l, m, θ, ϕ) = Plm(l, m, cos(θ)) * exp(im_m_ϕ)</p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[22]||(i[22]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/types-fucntions.jl#L79-L84",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),t("details",F,[t("summary",null,[i[24]||(i[24]=t("a",{id:"StrongFieldDynamics.atomic_electron-Tuple{Int64, Int64}",href:"#StrongFieldDynamics.atomic_electron-Tuple{Int64, Int64}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.atomic_electron")],-1)),i[25]||(i[25]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[27]||(i[27]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">atomic_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the atomic electron wavefunction for the corresponding <code>n</code> &amp; <code>l</code> Principal and Orbital quantum numbers, repectively.</p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[26]||(i[26]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/electron-wavefunction.jl#L11-L15",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),t("details",b,[t("summary",null,[i[28]||(i[28]=t("a",{id:"StrongFieldDynamics.bessel_electron-Tuple{Float64, Int64, Vector{Float64}}",href:"#StrongFieldDynamics.bessel_electron-Tuple{Float64, Int64, Vector{Float64}}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.bessel_electron")],-1)),i[29]||(i[29]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[31]||(i[31]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bessel_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ε</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Flost64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the radial part of the continuum (free) electron with Bessel function <code>P (r) = r jₗ(pr)</code> Returns the radial wavefunction of type <code>Vector{Float64}</code></p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[30]||(i[30]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/electron-wavefunction.jl#L32-L38",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),t("details",E,[t("summary",null,[i[32]||(i[32]=t("a",{id:"StrongFieldDynamics.distorted_electron-Tuple{Float64, Int64, Vector{Float64}, Vector{Float64}}",href:"#StrongFieldDynamics.distorted_electron-Tuple{Float64, Int64, Vector{Float64}, Vector{Float64}}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.distorted_electron")],-1)),i[33]||(i[33]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[35]||(i[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">distorted_electron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ε</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the distorted wave function of continuum photo electron with Bessel function Returns the radial wavefunction and phase-shift of type <code>(Vector{Float64}, Float64)</code></p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[34]||(i[34]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/electron-wavefunction.jl#L50-L55",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),t("details",f,[t("summary",null,[i[36]||(i[36]=t("a",{id:"StrongFieldDynamics.inner_product-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}",href:"#StrongFieldDynamics.inner_product-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.inner_product")],-1)),i[37]||(i[37]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[39]||(i[39]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inner_product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p_partialwave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PartialWave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculates the inner product of continuum and bound (atomic) electron radial wavefunction</p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[38]||(i[38]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/amplitudes.jl#L134-L138",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),t("details",_,[t("summary",null,[i[40]||(i[40]=t("a",{id:"StrongFieldDynamics.probability-Tuple{Pulse, AtomicElectron, ContinuumElectron}",href:"#StrongFieldDynamics.probability-Tuple{Pulse, AtomicElectron, ContinuumElectron}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.probability")],-1)),i[41]||(i[41]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[43]||(i[43]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">probality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculates the ionization probability</p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[42]||(i[42]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/amplitudes.jl#L4-L8",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),t("details",S,[t("summary",null,[i[44]||(i[44]=t("a",{id:"StrongFieldDynamics.reduced_matrix_element-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}",href:"#StrongFieldDynamics.reduced_matrix_element-Tuple{StrongFieldDynamics.PartialWave, AtomicElectron, Vector{Float64}}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.reduced_matrix_element")],-1)),i[45]||(i[45]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[47]||(i[47]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reduced_matrix_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(εp, lp, jp, n, l, j)</span></span></code></pre></div><p>Computes the reduced matrix element <code>&lt;εp lp jp || p || n l j&gt;</code></p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[46]||(i[46]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/amplitudes.jl#L85-L89",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),t("details",C,[t("summary",null,[i[48]||(i[48]=t("a",{id:"StrongFieldDynamics.sin2Sv-Tuple{Float64, Float64, Pulse, AtomicElectron, ContinuumElectron}",href:"#StrongFieldDynamics.sin2Sv-Tuple{Float64, Float64, Pulse, AtomicElectron, ContinuumElectron}"},[t("span",{class:"jlbinding"},"StrongFieldDynamics.sin2Sv")],-1)),i[49]||(i[49]=a()),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[51]||(i[51]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sin2Sv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, θ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pulse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pulse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AtomicElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContinuumElectron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Defines a sin² envelope.</p>',2)),e(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[50]||(i[50]=[t("a",{href:"https://github.com/AlokaSahoo/StrongFieldDynamics.jl/blob/960af45c1b6b42dcc714357aa126d50f2c83cc95/src/pulse-shape-integral.jl#L32-L36",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[50]})])])}const V=o(c,[["render",D]]);export{I as __pageData,V as default};
